import cv2
import mediapipe as mp
import numpy as np

# Initialize MediaPipe Face Mesh
mp_face_mesh = mp.solutions.face_mesh
face_mesh = mp_face_mesh.FaceMesh()

# Load mask image
mask = cv2.imread('mask.png', cv2.IMREAD_UNCHANGED)

# Initialize OpenCV
cap = cv2.VideoCapture(0)

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    # Flip the frame horizontally
    frame = cv2.flip(frame, 1)

    # Convert the frame to RGB
    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    results = face_mesh.process(rgb_frame)

    if results.multi_face_landmarks:
        for landmarks in results.multi_face_landmarks:
            # Get bounding box of face
            x_min = int(min([lm.x for lm in landmarks.landmark]) * frame.shape[1])
            y_min = int(min([lm.y for lm in landmarks.landmark]) * frame.shape[0])
            x_max = int(max([lm.x for lm in landmarks.landmark]) * frame.shape[1])
            y_max = int(max([lm.y for lm in landmarks.landmark]) * frame.shape[0])

            # Resize mask to fit face
            mask_resized = cv2.resize(mask, (x_max - x_min, y_max - y_min))

            # Overlay mask on face
            for c in range(0, 3):
                frame[y_min:y_max, x_min:x_max, c] = frame[y_min:y_max, x_min:x_max, c] * (1 - mask_resized[:, :, 3] / 255.0) + mask_resized[:, :, c] * (mask_resized[:, :, 3] / 255.0)

    cv2.imshow("Face Mask VFX", frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
